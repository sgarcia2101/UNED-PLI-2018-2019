
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 11 21:18:05 CET 2019
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 11 21:18:05 CET 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\052\002\000\002\002" +
    "\004\000\002\003\012\000\002\004\006\000\002\005\004" +
    "\000\002\005\002\000\002\006\004\000\002\006\003\000" +
    "\002\007\006\000\002\010\004\000\002\010\002\000\002" +
    "\011\004\000\002\011\003\000\002\012\006\000\002\013" +
    "\005\000\002\013\003\000\002\014\004\000\002\014\002" +
    "\000\002\015\004\000\002\015\003\000\002\016\006\000" +
    "\002\016\015\000\002\043\003\000\002\043\003\000\002" +
    "\044\003\000\002\044\003\000\002\045\003\000\002\045" +
    "\003\000\002\017\004\000\002\017\002\000\002\020\003" +
    "\000\002\020\004\000\002\021\003\000\002\021\003\000" +
    "\002\022\017\000\002\023\015\000\002\024\005\000\002" +
    "\024\003\000\002\024\002\000\002\025\003\000\002\025" +
    "\003\000\002\027\004\000\002\026\004\000\002\026\003" +
    "\000\002\030\005\000\002\031\005\000\002\031\003\000" +
    "\002\031\002\000\002\036\004\000\002\032\005\000\002" +
    "\032\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\002\000\002\034\006\000\002\035\005\000" +
    "\002\040\003\000\002\040\006\000\002\046\003\000\002" +
    "\046\003\000\002\046\002\000\002\047\003\000\002\047" +
    "\003\000\002\047\005\000\002\047\005\000\002\047\003" +
    "\000\002\047\004\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\037\006\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\041\011\000\002\041\014\000\002\042\014" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\004\030\000\001\002\000\004\002\255\001" +
    "\002\000\004\030\007\001\002\000\004\002\uffff\001\002" +
    "\000\004\007\010\001\002\000\004\047\011\001\002\000" +
    "\014\012\ufffb\013\014\033\ufffb\034\ufffb\036\ufffb\001\002" +
    "\000\004\012\251\001\002\000\012\012\uffef\033\uffef\034" +
    "\027\036\uffef\001\002\000\004\007\015\001\002\000\004" +
    "\056\021\001\002\000\012\012\ufffc\033\ufffc\034\ufffc\036" +
    "\ufffc\001\002\000\014\007\015\012\ufff9\033\ufff9\034\ufff9" +
    "\036\ufff9\001\002\000\012\012\ufffa\033\ufffa\034\ufffa\036" +
    "\ufffa\001\002\000\010\005\023\011\022\022\024\001\002" +
    "\000\036\020\uffb8\023\uffb8\032\uffb8\040\uffb8\042\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\052\uffb8\053\uffb8" +
    "\054\uffb8\055\uffb8\001\002\000\036\020\uffb9\023\uffb9\032" +
    "\uffb9\040\uffb9\042\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\001\002\000" +
    "\036\020\uffb7\023\uffb7\032\uffb7\040\uffb7\042\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\052\uffb7\053\uffb7\054" +
    "\uffb7\055\uffb7\001\002\000\004\046\026\001\002\000\014" +
    "\007\ufff8\012\ufff8\033\ufff8\034\ufff8\036\ufff8\001\002\000" +
    "\004\007\230\001\002\000\010\012\ufff6\033\ufff6\036\031" +
    "\001\002\000\004\007\215\001\002\000\006\012\uffe3\033" +
    "\033\001\002\000\006\024\042\027\037\001\002\000\004" +
    "\012\ufffd\001\002\000\010\012\uffdf\024\uffdf\027\uffdf\001" +
    "\002\000\010\012\uffe4\024\042\027\037\001\002\000\004" +
    "\007\202\001\002\000\010\012\uffe0\024\uffe0\027\uffe0\001" +
    "\002\000\010\012\uffe2\024\uffe2\027\uffe2\001\002\000\004" +
    "\007\043\001\002\000\004\041\044\001\002\000\024\005" +
    "\023\007\055\011\022\022\024\025\060\035\051\041\047" +
    "\042\uffda\047\uffd1\001\002\000\004\047\176\001\002\000" +
    "\024\005\023\007\055\011\022\022\024\025\060\041\047" +
    "\042\uffd5\046\uffd5\047\uffd1\001\002\000\016\005\023\007" +
    "\055\011\022\022\024\025\060\041\047\001\002\000\036" +
    "\020\uffbf\023\uffbf\032\uffbf\040\uffbf\042\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\047\uffbf\050\uffbf\052\uffbf\053\uffbf\054\uffbf" +
    "\055\uffbf\001\002\000\020\005\023\007\055\011\022\022" +
    "\024\025\060\041\047\047\uffd1\001\002\000\022\040\114" +
    "\042\uffd2\045\170\047\uffd2\052\115\053\117\054\120\055" +
    "\116\001\002\000\036\020\uffbe\023\uffbe\032\uffbe\040\uffbe" +
    "\042\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\052" +
    "\uffbe\053\uffbe\054\uffbe\055\uffbe\001\002\000\036\020\uffbb" +
    "\023\uffbb\032\uffbb\040\uffbb\042\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\047\uffbb\050\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\001\002\000\044\020\uffc4\023\uffc4\032\uffc4\040\uffc4\041" +
    "\162\042\uffc4\043\163\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\001" +
    "\002\000\006\042\uffd8\046\uffd8\001\002\000\006\042\uffd9" +
    "\046\uffd9\001\002\000\016\005\023\007\055\011\022\022" +
    "\024\025\060\041\047\001\002\000\006\042\uffdb\046\157" +
    "\001\002\000\004\042\063\001\002\000\004\047\064\001" +
    "\002\000\006\010\067\017\065\001\002\000\024\005\uffe8" +
    "\007\uffe8\011\uffe8\022\uffe8\025\uffe8\041\uffe8\042\uffe8\046" +
    "\uffe8\047\uffe8\001\002\000\004\047\070\001\002\000\024" +
    "\005\uffe7\007\uffe7\011\uffe7\022\uffe7\025\uffe7\041\uffe7\042" +
    "\uffe7\046\uffe7\047\uffe7\001\002\000\014\012\ufffb\013\014" +
    "\033\ufffb\034\ufffb\036\ufffb\001\002\000\004\012\072\001" +
    "\002\000\020\007\055\016\105\021\101\023\uffc7\026\074" +
    "\031\077\046\uffc7\001\002\000\010\023\uffcc\032\uffcc\046" +
    "\uffcc\001\002\000\004\007\146\001\002\000\004\056\144" +
    "\001\002\000\010\023\uffce\032\uffce\046\142\001\002\000" +
    "\016\005\023\007\055\011\022\022\024\025\060\041\047" +
    "\001\002\000\010\023\uffc8\032\uffc8\046\uffc8\001\002\000" +
    "\004\041\122\001\002\000\010\023\uffcb\032\uffcb\046\uffcb" +
    "\001\002\000\010\023\uffcd\032\uffcd\046\uffcd\001\002\000" +
    "\010\023\uffca\032\uffca\046\uffca\001\002\000\016\005\023" +
    "\007\055\011\022\022\024\025\060\041\047\001\002\000" +
    "\004\023\110\001\002\000\010\023\uffc9\032\uffc9\046\uffc9" +
    "\001\002\000\004\046\111\001\002\000\010\012\uffde\024" +
    "\uffde\027\uffde\001\002\000\022\023\uffd0\032\uffd0\040\114" +
    "\046\uffd0\052\115\053\117\054\120\055\116\001\002\000" +
    "\016\005\023\007\055\011\022\022\024\025\060\041\047" +
    "\001\002\000\016\005\uffb3\007\uffb3\011\uffb3\022\uffb3\025" +
    "\uffb3\041\uffb3\001\002\000\016\005\uffb5\007\uffb5\011\uffb5" +
    "\022\uffb5\025\uffb5\041\uffb5\001\002\000\016\005\uffb1\007" +
    "\uffb1\011\uffb1\022\uffb1\025\uffb1\041\uffb1\001\002\000\016" +
    "\005\uffb4\007\uffb4\011\uffb4\022\uffb4\025\uffb4\041\uffb4\001" +
    "\002\000\016\005\uffb2\007\uffb2\011\uffb2\022\uffb2\025\uffb2" +
    "\041\uffb2\001\002\000\036\020\uffbd\023\uffbd\032\uffbd\040" +
    "\114\042\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\052\115\053\117\054\120\055\116\001\002\000\022\005" +
    "\023\006\124\007\055\011\022\022\024\025\060\041\047" +
    "\042\uffc0\001\002\000\004\042\126\001\002\000\004\042" +
    "\uffc2\001\002\000\016\040\114\042\uffc1\052\115\053\117" +
    "\054\120\055\116\001\002\000\010\023\uffc6\032\uffc6\046" +
    "\uffc6\001\002\000\016\020\130\040\114\052\115\053\117" +
    "\054\120\055\116\001\002\000\004\047\131\001\002\000" +
    "\022\007\055\016\105\021\101\023\uffc7\026\074\031\077" +
    "\032\uffc7\046\uffc7\001\002\000\006\023\134\032\133\001" +
    "\002\000\004\047\136\001\002\000\004\031\135\001\002" +
    "\000\010\023\uffb0\032\uffb0\046\uffb0\001\002\000\020\007" +
    "\055\016\105\021\101\023\uffc7\026\074\031\077\046\uffc7" +
    "\001\002\000\004\023\140\001\002\000\004\031\141\001" +
    "\002\000\010\023\uffaf\032\uffaf\046\uffaf\001\002\000\022" +
    "\007\055\016\105\021\101\023\uffc7\026\074\031\077\032" +
    "\uffc7\046\uffc7\001\002\000\006\023\uffcf\032\uffcf\001\002" +
    "\000\016\005\023\007\055\011\022\022\024\025\060\041" +
    "\047\001\002\000\022\023\uffc5\032\uffc5\040\114\046\uffc5" +
    "\052\115\053\117\054\120\055\116\001\002\000\004\015" +
    "\147\001\002\000\016\005\023\007\055\011\022\022\024" +
    "\025\060\041\047\001\002\000\016\040\114\050\151\052" +
    "\115\053\117\054\120\055\116\001\002\000\016\005\023" +
    "\007\055\011\022\022\024\025\060\041\047\001\002\000" +
    "\016\040\114\047\153\052\115\053\117\054\120\055\116" +
    "\001\002\000\020\007\055\016\105\021\101\023\uffc7\026" +
    "\074\031\077\046\uffc7\001\002\000\004\023\155\001\002" +
    "\000\004\026\156\001\002\000\010\023\uffae\032\uffae\046" +
    "\uffae\001\002\000\024\005\023\007\055\011\022\022\024" +
    "\025\060\035\051\041\047\042\uffda\047\uffd1\001\002\000" +
    "\004\042\uffdc\001\002\000\036\020\uffba\023\uffba\032\uffba" +
    "\040\114\042\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\052\115\053\117\054\120\055\116\001\002\000\020" +
    "\005\023\007\055\011\022\022\024\025\060\041\047\042" +
    "\uffd1\001\002\000\016\005\023\007\055\011\022\022\024" +
    "\025\060\041\047\001\002\000\016\040\114\044\165\052" +
    "\115\053\117\054\120\055\116\001\002\000\040\020\uffc3" +
    "\023\uffc3\032\uffc3\040\uffc3\042\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\050\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\001\002\000\004\042\167\001\002\000\036\020" +
    "\uffb6\023\uffb6\032\uffb6\040\uffb6\042\uffb6\044\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\052\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\001\002\000\022\005\023\007\055\011\022\022\024" +
    "\025\060\041\047\042\uffd1\047\uffd1\001\002\000\006\042" +
    "\uffd3\047\uffd3\001\002\000\006\042\uffd7\046\uffd7\001\002" +
    "\000\016\040\114\042\174\052\115\053\117\054\120\055" +
    "\116\001\002\000\036\020\uffbc\023\uffbc\032\uffbc\040\uffbc" +
    "\042\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\001\002\000\006\042\uffd6" +
    "\046\uffd6\001\002\000\010\007\177\010\067\017\065\001" +
    "\002\000\024\005\uffe9\007\uffe9\011\uffe9\022\uffe9\025\uffe9" +
    "\041\uffe9\042\uffe9\046\uffe9\047\uffe9\001\002\000\024\005" +
    "\uffd4\007\uffd4\011\uffd4\022\uffd4\025\uffd4\041\uffd4\042\uffd4" +
    "\046\uffd4\047\uffd4\001\002\000\024\005\uffea\007\uffea\011" +
    "\uffea\022\uffea\025\uffea\041\uffea\042\uffea\046\uffea\047\uffea" +
    "\001\002\000\004\041\203\001\002\000\024\005\023\007" +
    "\055\011\022\022\024\025\060\035\051\041\047\042\uffda" +
    "\047\uffd1\001\002\000\004\042\205\001\002\000\004\047" +
    "\206\001\002\000\014\012\ufffb\013\014\033\ufffb\034\ufffb" +
    "\036\ufffb\001\002\000\004\012\210\001\002\000\020\007" +
    "\055\016\105\021\101\023\uffc7\026\074\031\077\046\uffc7" +
    "\001\002\000\004\023\212\001\002\000\004\046\213\001" +
    "\002\000\010\012\uffdd\024\uffdd\027\uffdd\001\002\000\010" +
    "\012\uffe1\024\uffe1\027\uffe1\001\002\000\006\045\225\047" +
    "\ufff1\001\002\000\006\012\ufff7\033\ufff7\001\002\000\010" +
    "\007\215\012\ufff4\033\ufff4\001\002\000\004\047\221\001" +
    "\002\000\010\007\177\010\067\017\065\001\002\000\004" +
    "\046\223\001\002\000\010\007\ufff3\012\ufff3\033\ufff3\001" +
    "\002\000\006\012\ufff5\033\ufff5\001\002\000\004\007\215" +
    "\001\002\000\004\047\ufff2\001\002\000\012\007\uffed\012" +
    "\uffed\033\uffed\036\uffed\001\002\000\004\056\233\001\002" +
    "\000\012\007\230\012\ufff0\033\ufff0\036\ufff0\001\002\000" +
    "\012\007\uffee\012\uffee\033\uffee\036\uffee\001\002\000\010" +
    "\010\067\017\065\037\234\001\002\000\004\043\237\001" +
    "\002\000\004\046\236\001\002\000\012\007\uffec\012\uffec" +
    "\033\uffec\036\uffec\001\002\000\006\005\241\007\240\001" +
    "\002\000\006\044\uffe6\050\uffe6\001\002\000\006\044\uffe5" +
    "\050\uffe5\001\002\000\004\050\243\001\002\000\006\005" +
    "\241\007\240\001\002\000\004\044\245\001\002\000\004" +
    "\014\246\001\002\000\006\010\067\017\065\001\002\000" +
    "\004\046\250\001\002\000\012\007\uffeb\012\uffeb\033\uffeb" +
    "\036\uffeb\001\002\000\020\007\055\016\105\021\101\023" +
    "\uffc7\026\074\031\077\046\uffc7\001\002\000\004\023\253" +
    "\001\002\000\004\051\254\001\002\000\004\002\ufffe\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\006\002\003\052\004\001\001\000\002\001" +
    "\001\000\004\003\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\011\005\012\001" +
    "\001\000\002\001\001\000\004\014\027\001\001\000\006" +
    "\006\015\007\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\017\007\016\001\001\000\002\001\001" +
    "\000\004\051\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\230\016\226\001\001\000\004\010\031\001" +
    "\001\000\010\011\215\012\216\013\217\001\001\000\004" +
    "\017\033\001\001\000\012\020\035\021\040\022\037\023" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\213\022\037\023\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\024\061\025\060\026\055\027\056\030" +
    "\045\031\044\037\053\040\047\047\051\051\052\001\001" +
    "\000\002\001\001\000\020\026\174\030\045\031\044\037" +
    "\053\040\047\047\051\051\052\001\001\000\012\037\053" +
    "\040\047\047\172\051\052\001\001\000\002\001\001\000" +
    "\020\026\171\030\045\031\044\037\053\040\047\047\051" +
    "\051\052\001\001\000\004\050\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\037\053\040\047\047\160\051" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\070\005\012" +
    "\001\001\000\002\001\001\000\024\032\105\033\075\034" +
    "\102\035\072\036\101\037\077\040\074\041\103\042\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\037\053\040\047\047\126" +
    "\051\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\037\053\040\047\047\111\051\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\112\001\001\000\012\037\053\040\047\047" +
    "\120\051\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\112\001\001\000\014\037\053\040\047\046\122" +
    "\047\124\051\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\112\001\001\000\002\001\001\000\004" +
    "\050\112\001\001\000\002\001\001\000\024\032\131\033" +
    "\075\034\102\035\072\036\101\037\077\040\074\041\103" +
    "\042\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\032\136\033\075" +
    "\034\102\035\072\036\101\037\077\040\074\041\103\042" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\032\142\033\075\034\102\035\072\036" +
    "\101\037\077\040\074\041\103\042\106\001\001\000\002" +
    "\001\001\000\012\037\053\040\047\047\144\051\052\001" +
    "\001\000\004\050\112\001\001\000\002\001\001\000\012" +
    "\037\053\040\047\047\147\051\052\001\001\000\004\050" +
    "\112\001\001\000\012\037\053\040\047\047\151\051\052" +
    "\001\001\000\004\050\112\001\001\000\024\032\153\033" +
    "\075\034\102\035\072\036\101\037\077\040\074\041\103" +
    "\042\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\024\157\025\060\026\055\027\056" +
    "\030\045\031\044\037\053\040\047\047\051\051\052\001" +
    "\001\000\002\001\001\000\004\050\112\001\001\000\014" +
    "\031\165\037\053\040\047\047\051\051\052\001\001\000" +
    "\012\037\053\040\047\047\163\051\052\001\001\000\004" +
    "\050\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\031\170\037\053\040\047\047\051" +
    "\051\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\043\177\044\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\024\203\025\060\026\055\027\056\030\045\031\044\037" +
    "\053\040\047\047\051\051\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\206\005\012\001\001\000" +
    "\002\001\001\000\024\032\210\033\075\034\102\035\072" +
    "\036\101\037\077\040\074\041\103\042\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\223\012\216\013\217\001\001\000\002\001\001\000\006" +
    "\043\221\044\200\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\231\001\001\000\002\001\001\000\004\044\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\243\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\246\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\032\251\033\075\034" +
    "\102\035\072\036\101\037\077\040\074\041\103\042\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // bloqueFor ::= FOR ID IN expresion RANGE expresion COLON sentencias END FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueFor",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // bloqueIf ::= IF expresion THEN COLON sentencias ELSE COLON sentencias END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIf",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // bloqueIf ::= IF expresion THEN COLON sentencias END IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloqueIf",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operador ::= EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operador ::= LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operador ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operador ::= ASTERISK 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operador ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // llamadaFuncion ::= ID LEFT_PARENTHESIS listaParametros RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamadaFuncion",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valorPrimitivo ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorPrimitivo",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valorPrimitivo ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorPrimitivo",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valorPrimitivo ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valorPrimitivo",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= NOT expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= llamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= LEFT_PARENTHESIS expresion RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= expresion operador expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= valorPrimitivo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= referencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametro ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametro ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametro ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // referencia ::= ID LEFT_BRACKET expresion RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // referencia ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("referencia",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentenciaAsignacion ::= referencia ASSIGN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentenciaEscribir ::= WRITE LEFT_PARENTHESIS parametro RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaEscribir",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia ::= llamadaFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia ::= bloqueFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia ::= bloqueIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia ::= sentenciaReturn 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia ::= sentenciaAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia ::= sentenciaEscribir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencias ::= sentencia SEMICOLON sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentenciaReturn ::= RETURN expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturn",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listaParametros ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listaParametros ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // listaParametros ::= expresion COMMA listaParametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametrosFuncion ::= listaParametros COLON tipos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametrosFuncion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // listaParametrosPasoPorvalor ::= parametrosFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametrosPasoPorvalor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listaParametrosPasoPorvalor ::= parametrosFuncion listaParametrosPasoPorvalor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametrosPasoPorvalor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listaParametrosPasoPorReferencia ::= VAR listaParametrosPasoPorvalor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametrosPasoPorReferencia",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listaParametrosFuncion ::= listaParametrosPasoPorvalor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametrosFuncion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaParametrosFuncion ::= listaParametrosPasoPorReferencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametrosFuncion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listaParametrosFuncionAux ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametrosFuncionAux",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listaParametrosFuncionAux ::= listaParametrosFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametrosFuncionAux",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listaParametrosFuncionAux ::= listaParametrosFuncion SEMICOLON listaParametrosFuncionAux 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametrosFuncionAux",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracionProcedimiento ::= PROCEDURE ID LEFT_PARENTHESIS listaParametrosFuncionAux RIGHT_PARENTHESIS COLON declaraciones BEGIN sentencias END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionProcedimiento",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracionFuncion ::= FUNCTION ID LEFT_PARENTHESIS listaParametrosFuncionAux RIGHT_PARENTHESIS COLON tiposPrimitivos COLON declaraciones BEGIN sentencias END SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionFuncion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracionSubprograma ::= declaracionProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprograma",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracionSubprograma ::= declaracionFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprograma",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracionesSubprograma ::= declaracionesSubprograma declaracionSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesSubprograma",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracionesSubprograma ::= declaracionSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesSubprograma",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracionSubprogramas ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprogramas",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracionSubprogramas ::= SUBPROGRAM declaracionesSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionSubprogramas",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipoVector ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVector",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipoVector ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVector",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tiposPrimitivos ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiposPrimitivos",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tiposPrimitivos ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tiposPrimitivos",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipos ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipos ::= tiposPrimitivos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresionTipo ::= ID ASSIGN VECTOR LEFT_BRACKET tipoVector RANGE tipoVector RIGHT_BRACKET OF tiposPrimitivos SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresionTipo ::= ID ASSIGN tiposPrimitivos SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionTipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresionesTipo ::= expresionTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesTipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresionesTipo ::= expresionesTipo expresionTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesTipo",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionTipos ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracionTipos ::= TYPES expresionesTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionTipos",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listaExpresionVariable ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresionVariable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listaExpresionVariable ::= ID COMMA listaExpresionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaExpresionVariable",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresionVariable ::= listaExpresionVariable COLON tipos SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresionesVariable ::= expresionVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expresionesVariable ::= expresionVariable expresionesVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionVariables ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionVariables ::= VARIABLES expresionesVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expresionConstante ::= ID ASSIGN valorPrimitivo SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionConstante",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expresionesConstante ::= expresionConstante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesConstante",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expresionesConstante ::= expresionConstante expresionesConstante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesConstante",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracionConstantes ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracionConstantes ::= CONSTANTS expresionesConstante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionConstantes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= declaracionConstantes declaracionTipos declaracionVariables declaracionSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= PROGRAM ID COLON declaraciones BEGIN sentencias END DOT 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
  		// No modificar esta estructura, aunque se pueden a�adir m�s acciones sem�nticas
  		// Para la entrega de febrero pueden comentarse las dos sentencias siguientes:
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);
  		// En caso de no comentarse las sentencias anteriores puede generar una excepcion
  		// en las llamadas a cupTest en la entrega de Febrero. Esto es debido a que 
  		// a�n no se tendr� implementada la generaci�n de c�digo intermedio ni final.
  		// Para la entrega de Junio deber�n descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

